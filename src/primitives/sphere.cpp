#include "sphere.h"
#include <cmath>
#include <iostream>

Sphere::Sphere(SphereDimensions const &dimensions, SphereParameters const &parameters) : Mesh{}, dimensions{dimensions}, parameters{parameters}
{
  createVertices();
  computeFaces();
  CreateMesh();
}

Sphere::~Sphere()
{
}

// void Sphere::createVertices()
// {
//   this->vertices = {{0.2, 0.6000000238418579, 0},
//                     {0.014589798450469982, 0.5706338882446289, 0},
//                     {0.049999994039535534, 0.5706338882446289, 0.10898137837648392},
//                     {0.14270509853959085, 0.5706338882446289, 0.17633557319641113},
//                     {0.2572949014604092, 0.5706338882446289, 0.17633557319641113},
//                     {0.3500000059604645, 0.5706338882446289, 0.10898137837648392},
//                     {0.38541020154953004, 0.5706338882446289, 2.2706200458809216e-17},
//                     {0.3500000059604645, 0.5706338882446289, -0.10898137837648392},
//                     {0.2572949014604092, 0.5706338882446289, -0.17633557319641113},
//                     {0.14270509853959085, 0.5706338882446289, -0.17633557319641113},
//                     {0.049999994039535534, 0.5706338882446289, -0.10898137837648392},
//                     {-0.15267114639282225, 0.4854101836681366, 0},
//                     {-0.08531694412231444, 0.4854101836681366, 0.20729489624500275},
//                     {0.0910186216235161, 0.4854101836681366, 0.3354102075099945},
//                     {0.30898137837648393, 0.4854101836681366, 0.3354102075099945},
//                     {0.48531694412231446, 0.4854101836681366, 0.20729489624500275},
//                     {0.5526711463928222, 0.4854101836681366, 4.3189759994243545e-17},
//                     {0.48531694412231446, 0.4854101836681366, -0.20729489624500275},
//                     {0.30898137837648393, 0.4854101836681366, -0.3354102075099945},
//                     {0.0910186216235161, 0.4854101836681366, -0.3354102075099945},
//                     {-0.08531694412231444, 0.4854101836681366, -0.20729489624500275},
//                     {-0.2854101836681366, 0.35267114639282227, 0},
//                     {-0.19270511269569396, 0.35267114639282227, 0.28531694412231445},
//                     {0.049999994039535534, 0.35267114639282227, 0.4616525173187256},
//                     {0.3500000059604645, 0.35267114639282227, 0.4616525173187256},
//                     {0.5927051126956939, 0.35267114639282227, 0.28531694412231445},
//                     {0.6854101836681366, 0.35267114639282227, 5.944560603636425e-17},
//                     {0.5927051126956939, 0.35267114639282227, -0.28531694412231445},
//                     {0.3500000059604645, 0.35267114639282227, -0.4616525173187256},
//                     {0.049999994039535534, 0.35267114639282227, -0.4616525173187256},
//                     {-0.19270511269569396, 0.35267114639282227, -0.28531694412231445},
//                     {-0.3706338882446289, 0.18541020154953003, 0},
//                     {-0.2616525173187256, 0.18541020154953003, 0.3354102075099945},
//                     {0.02366442680358888, 0.18541020154953003, 0.5427051186561584},
//                     {0.37633557319641114, 0.18541020154953003, 0.5427051186561584},
//                     {0.6616525173187255, 0.18541020154953003, 0.3354102075099945},
//                     {0.7706338882446289, 0.18541020154953003, 6.988250116697042e-17},
//                     {0.6616525173187255, 0.18541020154953003, -0.3354102075099945},
//                     {0.37633557319641114, 0.18541020154953003, -0.5427051186561584},
//                     {0.02366442680358888, 0.18541020154953003, -0.5427051186561584},
//                     {-0.2616525173187256, 0.18541020154953003, -0.3354102075099945},
//                     {-0.4000000238418579, 3.6739405577555036e-17, 0},
//                     {-0.2854101836681366, 3.6739405577555036e-17, 0.35267114639282227},
//                     {0.014589798450469982, 3.6739405577555036e-17, 0.5706338882446289},
//                     {0.38541020154953004, 3.6739405577555036e-17, 0.5706338882446289},
//                     {0.6854101836681366, 3.6739405577555036e-17, 0.35267114639282227},
//                     {0.8000000238418579, 3.6739405577555036e-17, 7.347881115511007e-17},
//                     {0.6854101836681366, 3.6739405577555036e-17, -0.35267114639282227},
//                     {0.38541020154953004, 3.6739405577555036e-17, -0.5706338882446289},
//                     {0.014589798450469982, 3.6739405577555036e-17, -0.5706338882446289},
//                     {-0.2854101836681366, 3.6739405577555036e-17, -0.35267114639282227},
//                     {-0.3706338882446289, -0.18541020154953003, 0},
//                     {-0.2616525173187256, -0.18541020154953003, 0.3354102075099945},
//                     {0.02366442680358888, -0.18541020154953003, 0.5427051186561584},
//                     {0.37633557319641114, -0.18541020154953003, 0.5427051186561584},
//                     {0.6616525173187255, -0.18541020154953003, 0.3354102075099945},
//                     {0.7706338882446289, -0.18541020154953003, 6.988250116697042e-17},
//                     {0.6616525173187255, -0.18541020154953003, -0.3354102075099945},
//                     {0.37633557319641114, -0.18541020154953003, -0.5427051186561584},
//                     {0.02366442680358888, -0.18541020154953003, -0.5427051186561584},
//                     {-0.2616525173187256, -0.18541020154953003, -0.3354102075099945},
//                     {-0.2854101836681366, -0.35267114639282227, 0},
//                     {-0.19270511269569396, -0.35267114639282227, 0.28531694412231445},
//                     {0.049999994039535534, -0.35267114639282227, 0.4616525173187256},
//                     {0.3500000059604645, -0.35267114639282227, 0.4616525173187256},
//                     {0.5927051126956939, -0.35267114639282227, 0.28531694412231445},
//                     {0.6854101836681366, -0.35267114639282227, 5.944560603636425e-17},
//                     {0.5927051126956939, -0.35267114639282227, -0.28531694412231445},
//                     {0.3500000059604645, -0.35267114639282227, -0.4616525173187256},
//                     {0.049999994039535534, -0.35267114639282227, -0.4616525173187256},
//                     {-0.19270511269569396, -0.35267114639282227, -0.28531694412231445},
//                     {-0.15267114639282225, -0.4854101836681366, 0},
//                     {-0.08531694412231444, -0.4854101836681366, 0.20729489624500275},
//                     {0.0910186216235161, -0.4854101836681366, 0.3354102075099945},
//                     {0.30898137837648393, -0.4854101836681366, 0.3354102075099945},
//                     {0.48531694412231446, -0.4854101836681366, 0.20729489624500275},
//                     {0.5526711463928222, -0.4854101836681366, 4.3189759994243545e-17},
//                     {0.48531694412231446, -0.4854101836681366, -0.20729489624500275},
//                     {0.30898137837648393, -0.4854101836681366, -0.3354102075099945},
//                     {0.0910186216235161, -0.4854101836681366, -0.3354102075099945},
//                     {-0.08531694412231444, -0.4854101836681366, -0.20729489624500275},
//                     {0.014589798450469982, -0.5706338882446289, 0},
//                     {0.049999994039535534, -0.5706338882446289, 0.10898137837648392},
//                     {0.14270509853959085, -0.5706338882446289, 0.17633557319641113},
//                     {0.2572949014604092, -0.5706338882446289, 0.17633557319641113},
//                     {0.3500000059604645, -0.5706338882446289, 0.10898137837648392},
//                     {0.38541020154953004, -0.5706338882446289, 2.2706200458809216e-17},
//                     {0.3500000059604645, -0.5706338882446289, -0.10898137837648392},
//                     {0.2572949014604092, -0.5706338882446289, -0.17633557319641113},
//                     {0.14270509853959085, -0.5706338882446289, -0.17633557319641113},
//                     {0.049999994039535534, -0.5706338882446289, -0.10898137837648392},
//                     {0.19999999999999993, -0.6000000238418579, 0}

//   };
//   this->indices = {
//       0,
//       1,
//       2,
//       0,
//       2,
//       3,
//       0,
//       3,
//       4,
//       0,
//       4,
//       5,
//       0,
//       5,
//       6,
//       0,
//       6,
//       7,
//       0,
//       7,
//       8,
//       0,
//       8,
//       9,
//       0,
//       9,
//       10,
//       0,
//       10,
//       1,
//       2,
//       1,
//       12,
//       1,
//       11,
//       12,
//       3,
//       2,
//       13,
//       2,
//       12,
//       13,
//       4,
//       3,
//       14,
//       3,
//       13,
//       14,
//       5,
//       4,
//       15,
//       4,
//       14,
//       15,
//       6,
//       5,
//       16,
//       5,
//       15,
//       16,
//       7,
//       6,
//       17,
//       6,
//       16,
//       17,
//       8,
//       7,
//       18,
//       7,
//       17,
//       18,
//       9,
//       8,
//       19,
//       8,
//       18,
//       19,
//       10,
//       9,
//       20,
//       9,
//       19,
//       20,
//       1,
//       10,
//       11,
//       10,
//       20,
//       11,
//       12,
//       11,
//       22,
//       11,
//       21,
//       22,
//       13,
//       12,
//       23,
//       12,
//       22,
//       23,
//       14,
//       13,
//       24,
//       13,
//       23,
//       24,
//       15,
//       14,
//       25,
//       14,
//       24,
//       25,
//       16,
//       15,
//       26,
//       15,
//       25,
//       26,
//       17,
//       16,
//       27,
//       16,
//       26,
//       27,
//       18,
//       17,
//       28,
//       17,
//       27,
//       28,
//       19,
//       18,
//       29,
//       18,
//       28,
//       29,
//       20,
//       19,
//       30,
//       19,
//       29,
//       30,
//       11,
//       20,
//       21,
//       20,
//       30,
//       21,
//       22,
//       21,
//       32,
//       21,
//       31,
//       32,
//       23,
//       22,
//       33,
//       22,
//       32,
//       33,
//       24,
//       23,
//       34,
//       23,
//       33,
//       34,
//       25,
//       24,
//       35,
//       24,
//       34,
//       35,
//       26,
//       25,
//       36,
//       25,
//       35,
//       36,
//       27,
//       26,
//       37,
//       26,
//       36,
//       37,
//       28,
//       27,
//       38,
//       27,
//       37,
//       38,
//       29,
//       28,
//       39,
//       28,
//       38,
//       39,
//       30,
//       29,
//       40,
//       29,
//       39,
//       40,
//       21,
//       30,
//       31,
//       30,
//       40,
//       31,
//       32,
//       31,
//       42,
//       31,
//       41,
//       42,
//       33,
//       32,
//       43,
//       32,
//       42,
//       43,
//       34,
//       33,
//       44,
//       33,
//       43,
//       44,
//       35,
//       34,
//       45,
//       34,
//       44,
//       45,
//       36,
//       35,
//       46,
//       35,
//       45,
//       46,
//       37,
//       36,
//       47,
//       36,
//       46,
//       47,
//       38,
//       37,
//       48,
//       37,
//       47,
//       48,
//       39,
//       38,
//       49,
//       38,
//       48,
//       49,
//       40,
//       39,
//       50,
//       39,
//       49,
//       50,
//       31,
//       40,
//       41,
//       40,
//       50,
//       41,
//       42,
//       41,
//       52,
//       41,
//       51,
//       52,
//       43,
//       42,
//       53,
//       42,
//       52,
//       53,
//       44,
//       43,
//       54,
//       43,
//       53,
//       54,
//       45,
//       44,
//       55,
//       44,
//       54,
//       55,
//       46,
//       45,
//       56,
//       45,
//       55,
//       56,
//       47,
//       46,
//       57,
//       46,
//       56,
//       57,
//       48,
//       47,
//       58,
//       47,
//       57,
//       58,
//       49,
//       48,
//       59,
//       48,
//       58,
//       59,
//       50,
//       49,
//       60,
//       49,
//       59,
//       60,
//       41,
//       50,
//       51,
//       50,
//       60,
//       51,
//       52,
//       51,
//       62,
//       51,
//       61,
//       62,
//       53,
//       52,
//       63,
//       52,
//       62,
//       63,
//       54,
//       53,
//       64,
//       53,
//       63,
//       64,
//       55,
//       54,
//       65,
//       54,
//       64,
//       65,
//       56,
//       55,
//       66,
//       55,
//       65,
//       66,
//       57,
//       56,
//       67,
//       56,
//       66,
//       67,
//       58,
//       57,
//       68,
//       57,
//       67,
//       68,
//       59,
//       58,
//       69,
//       58,
//       68,
//       69,
//       60,
//       59,
//       70,
//       59,
//       69,
//       70,
//       51,
//       60,
//       61,
//       60,
//       70,
//       61,
//       62,
//       61,
//       72,
//       61,
//       71,
//       72,
//       63,
//       62,
//       73,
//       62,
//       72,
//       73,
//       64,
//       63,
//       74,
//       63,
//       73,
//       74,
//       65,
//       64,
//       75,
//       64,
//       74,
//       75,
//       66,
//       65,
//       76,
//       65,
//       75,
//       76,
//       67,
//       66,
//       77,
//       66,
//       76,
//       77,
//       68,
//       67,
//       78,
//       67,
//       77,
//       78,
//       69,
//       68,
//       79,
//       68,
//       78,
//       79,
//       70,
//       69,
//       80,
//       69,
//       79,
//       80,
//       61,
//       70,
//       71,
//       70,
//       80,
//       71,
//       72,
//       71,
//       82,
//       71,
//       81,
//       82,
//       73,
//       72,
//       83,
//       72,
//       82,
//       83,
//       74,
//       73,
//       84,
//       73,
//       83,
//       84,
//       75,
//       74,
//       85,
//       74,
//       84,
//       85,
//       76,
//       75,
//       86,
//       75,
//       85,
//       86,
//       77,
//       76,
//       87,
//       76,
//       86,
//       87,
//       78,
//       77,
//       88,
//       77,
//       87,
//       88,
//       79,
//       78,
//       89,
//       78,
//       88,
//       89,
//       80,
//       79,
//       90,
//       79,
//       89,
//       90,
//       71,
//       80,
//       81,
//       80,
//       90,
//       81,
//       82,
//       81,
//       91,
//       83,
//       82,
//       91,
//       84,
//       83,
//       91,
//       85,
//       84,
//       91,
//       86,
//       85,
//       91,
//       87,
//       86,
//       91,
//       88,
//       87,
//       91,
//       89,
//       88,
//       91,
//       90,
//       89,
//       91,
//       81,
//       90,
//       91};
// }

void Sphere::createVertices()
{
  auto radius = dimensions.radius;
  auto heightSegments = parameters.heightSegments;
  auto widthSegments = parameters.widthSegments;
  auto phiStart = parameters.phiStart;
  auto phiLength = parameters.phiLength;
  auto thetaStart = parameters.thetaStart;
  auto thetaLength = parameters.thetaLength;

  int index = 0;
  std::vector<std::vector<int>> grid;

  widthSegments = std::max(3, widthSegments);
  heightSegments = std::max(2, heightSegments);

  auto thetaEnd = std::min(thetaStart + thetaLength, float(M_PI));

  for (size_t iy{0}; iy <= heightSegments; iy++)
  {
    std::vector<int> verticesRow;
    auto v = iy / (float)heightSegments;
    auto uOffset = 0;
    if (iy == 0 && thetaStart == 0)
    {
      uOffset = 0.5 / widthSegments;
    }
    else if (iy == heightSegments && thetaEnd == M_PI)
    {
      uOffset = -0.5 / widthSegments;
    }

    for (size_t ix{0}; ix <= widthSegments; ix++)
    {
      auto u = ix / (float)widthSegments;
      auto vertex = glm::vec3();
      vertex.x = -radius * cos(phiStart + u * phiLength) * sin(thetaStart + v * thetaLength);
      vertex.y = radius * cos(thetaStart + v * thetaLength);
      vertex.z = radius * sin(phiStart + u * phiLength) * sin(thetaStart + v * thetaLength);
      this->vertices.push_back(vertex);

      // normal
      auto normal = glm::normalize(glm::vec3(vertex));
      this->normals.push_back(normal);

      // uv
      // auto uv = glm::vec2(u + uOffset, 1.0f - v);
      // this->uvs.push_back(uv);

      verticesRow.push_back(index++);
    }
    grid.push_back(verticesRow);
  }

  // indices

  for (size_t iy{0}; iy < heightSegments; iy++)
  {
    for (size_t ix{0}; ix < widthSegments; ix++)
    {
      auto a = grid.at(iy).at(ix + 1);
      auto b = grid.at(iy).at(ix);
      auto c = grid.at(iy + 1).at(ix);
      auto d = grid.at(iy + 1).at(ix + 1);

      if (iy != 0 || thetaStart > 0)
      {
        this->indices.push_back(a);
        this->indices.push_back(b);
        this->indices.push_back(d);
      }
      if (iy != heightSegments - 1 || thetaEnd < M_PI)
      {
        this->indices.push_back(b);
        this->indices.push_back(c);
        this->indices.push_back(d);
      }
    }
  }
}
